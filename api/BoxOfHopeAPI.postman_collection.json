{
	"info": {
		"_postman_id": "15107354-4d64-46dd-9731-24642c0c833c",
		"name": "FinalisedTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Register Box Status - uvc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST Return Status Code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"statusId\", pm.response.json()._id);\r",
							"\r",
							"pm.test(\"Check keyword is ['uvc', 'door', 'mask']\", () => {\r",
							"  pm.expect(pm.response.json().keyword)\r",
							"    .to.be.oneOf([\"uvc\",\"door\",\"mask\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"keyword\": \"uvc\",\n    \"state\": \"on\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/state/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register 2nd Box Status - uvc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST Return Status Code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"statusId_2\", pm.response.json()._id);\r",
							"\r",
							"pm.test(\"Check keyword is ['uvc', 'door', 'mask']\", () => {\r",
							"  pm.expect(pm.response.json().keyword)\r",
							"    .to.be.oneOf([\"uvc\",\"door\",\"mask\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"keyword\": \"uvc\",\n    \"state\": \"on\",\n    \"createdAt\": \"2020-04-13T19:36:20.269Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/state/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Most Recent Status - uvc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check GET doesn't return empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check keyword is 'uvc'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].keyword).to.equal('uvc');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "uvc",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/uvc/latest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"uvc",
						"latest"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All States With Keyword \"uvc\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'uvc'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('uvc');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/state/uvc/all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"uvc",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All States With Keyword \"uvc\" For Past Week",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'uvc'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('uvc');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/state/uvc/since/7",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"uvc",
						"since",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Box Status - uvc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Return Code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "uvc",
							"type": "text"
						},
						{
							"key": "state",
							"value": "off",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/{{statusId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"{{statusId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete 2nd Box Status - uvc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Return Code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "uvc",
							"type": "text"
						},
						{
							"key": "state",
							"value": "off",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/{{statusId_2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"{{statusId_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Box Status - door",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST Return Status Code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"statusId\", pm.response.json()._id);\r",
							"\r",
							"pm.test(\"Check keyword is ['uvc', 'door', 'mask']\", () => {\r",
							"  pm.expect(pm.response.json().keyword)\r",
							"    .to.be.oneOf([\"uvc\",\"door\",\"mask\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"keyword\": \"door\",\n    \"state\": \"closed\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/state/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register 2nd Box Status - door",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST Return Status Code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"statusId_2\", pm.response.json()._id);\r",
							"\r",
							"pm.test(\"Check keyword is ['uvc', 'door', 'mask']\", () => {\r",
							"  pm.expect(pm.response.json().keyword)\r",
							"    .to.be.oneOf([\"uvc\",\"door\",\"mask\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"keyword\": \"door\",\n    \"state\": \"closed\",\n    \"createdAt\": \"2020-04-13T19:36:20.269Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/state/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Most Recent Status - door",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check GET doesn't return empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check keyword is 'door'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].keyword).to.equal('door');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "door",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/door/latest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"door",
						"latest"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All States With Keyword \"door\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'door'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('door');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/state/door/all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"door",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All States With Keyword \"door\" For Past Week",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'door'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('door');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/state/door/since/7",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"door",
						"since",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Box Status - door",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Return Code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "uvc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "state",
							"value": "off",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/{{statusId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"{{statusId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete 2nd Box Status - door",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Return Code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "uvc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "state",
							"value": "off",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/{{statusId_2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"{{statusId_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Box Status - mask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST Return Status Code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"statusId\", pm.response.json()._id);\r",
							"\r",
							"pm.test(\"Check keyword is ['uvc', 'door', 'mask']\", () => {\r",
							"  pm.expect(pm.response.json().keyword)\r",
							"    .to.be.oneOf([\"uvc\",\"door\",\"mask\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"keyword\": \"mask\",\n    \"state\": \"on\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/state/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register 2nd Box Status - mask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST Return Status Code\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"statusId_2\", pm.response.json()._id);\r",
							"\r",
							"pm.test(\"Check keyword is ['uvc', 'door', 'mask']\", () => {\r",
							"  pm.expect(pm.response.json().keyword)\r",
							"    .to.be.oneOf([\"uvc\",\"door\",\"mask\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"keyword\": \"mask\",\n    \"state\": \"closed\",\n    \"createdAt\": \"2020-04-13T19:36:20.269Z\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/state/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Most Recent Status - mask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check GET doesn't return empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Check keyword is 'mask'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].keyword).to.equal('mask');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "mask",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/mask/latest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"mask",
						"latest"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All States With Keyword \"mask\"",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'mask'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('mask');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(2);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/state/mask/all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"mask",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All States With Keyword \"mask\" For Past Week",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'mask'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('mask');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/state/mask/since/7",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"mask",
						"since",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Box Status - mask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Return Code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "uvc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "state",
							"value": "off",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/{{statusId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"{{statusId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete 2nd Box Status - mask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Return Code\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "uvc",
							"type": "text",
							"disabled": true
						},
						{
							"key": "state",
							"value": "off",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/state/{{statusId_2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"state",
						"{{statusId_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New User_Home Entry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST request - new user home entry added to database\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"userHomeId\", pm.response.json()._id);\r",
							"\r",
							"pm.test(\"Value is in valid list\", () => {\r",
							"  pm.expect(pm.response.json().user_status[0])\r",
							"    .to.be.oneOf([\"User Home\",\"User Not Home\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_status",
							"value": "User Home",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/userHome/user-status",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"user-status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add 2nd New User_Home Entry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST request - new user home entry added to database\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"userHomeId_2\", pm.response.json()._id);\r",
							"\r",
							"pm.test(\"Value is in valid list\", () => {\r",
							"  pm.expect(pm.response.json().user_status[0])\r",
							"    .to.be.oneOf([\"User Home\",\"User Not Home\"]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_status",
							"value": "User Home",
							"type": "text"
						},
						{
							"key": "createdAt",
							"value": "2020-03-31T09:36:31.207Z",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/userHome/user-status",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"user-status"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to Get User_Home Entry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check GET function works\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/userHome/user-status/{{userHomeId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"user-status",
						"{{userHomeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Most Recent userHome Entry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check GET doesn't return empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.equal(null);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/userHome/latest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"latest"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All UserHome Entries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/userHome/all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All UserHome Entries In Past (countBack) Days",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/userHome/all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User_Home Entry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"PUT function works\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.user_status[0]).to.equal('User Not Home');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user_status",
							"value": "User Not Home",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/userHome/user-status/{{userHomeId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"user-status",
						"{{userHomeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Setting: Sterilisation Time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 - User Home entry successfully deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/userHome/user-status/{{userHomeId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"user-status",
						"{{userHomeId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete 2nd User_Home Entry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 - User Home entry successfully deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/userHome/user-status/{{userHomeId_2}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"userHome",
						"user-status",
						"{{userHomeId_2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Setting - Sterilisation Time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST request - new user home entry added to database\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.globals.set(\"sterilisationId\", pm.response.json()._id);",
							"",
							"pm.test(\"Check keyword is valid\", () => {",
							"  pm.expect(pm.response.json().keyword)",
							"    .to.be.oneOf([\"sterilisation\",\"max-wears\", \"max-days\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "sterilisation",
							"type": "text"
						},
						{
							"key": "value",
							"value": "90",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/settings/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Setting - Max Wears",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST request - new user home entry added to database\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.globals.set(\"maxWearsId\", pm.response.json()._id);",
							"",
							"pm.test(\"Check keyword is valid\", () => {",
							"  pm.expect(pm.response.json().keyword)",
							"    .to.be.oneOf([\"sterilisation\",\"max-wears\", \"max-days\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "max-wears",
							"type": "text"
						},
						{
							"key": "value",
							"value": "2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/settings/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Setting - Max Days",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST request - new user home entry added to database\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.globals.set(\"maxDaysId\", pm.response.json()._id);",
							"",
							"pm.test(\"Check keyword is valid\", () => {",
							"  pm.expect(pm.response.json().keyword)",
							"    .to.be.oneOf([\"sterilisation\",\"max-wears\", \"max-days\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "keyword",
							"value": "max-days",
							"type": "text"
						},
						{
							"key": "value",
							"value": "3",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/settings/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Setting: Sterilisation Time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'sterilisation'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('sterilisation');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/settings/sterilisation",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"sterilisation"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Setting: Max Wears",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'max-wears'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('max-wears');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/settings/max-wears",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"max-wears"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Setting: Max Days",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Status Code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Check keyword is 'max-days'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].keyword).to.equal('max-days');",
							"});",
							"",
							"pm.test(\"Check the correct number of entries are returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/settings/max-days",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"max-days"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Settings: Sterilisation Time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 - User Home entry successfully deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/settings/{{sterilisationId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"{{sterilisationId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Settings: Max Wears",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 - User Home entry successfully deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/settings/{{maxWearsId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"{{maxWearsId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Settings: Max Days",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 - User Home entry successfully deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/settings/{{maxDaysId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"settings",
						"{{maxDaysId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add New Mask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request - new mask added to database\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"\r",
							"pm.globals.set(\"maskId\", pm.response.json()._id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "last_check_in",
							"value": "2021-03-08T11:00:00",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/mask/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"mask",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Attempt to Get Mask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET function works\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.not.equal(null);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/mask/{{maskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"mask",
						"{{maskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Mask Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"PUT function works\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.last_check_in).to.equal('2021-02-20T11:00:00.000Z');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "last_check_in",
							"value": "2021-02-20T11:00:00",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3001/mask/{{maskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"mask",
						"{{maskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Number of Masks ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET function works\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/mask/mask-count",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"mask",
						"mask-count"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Mask",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 - mask successfully deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/mask/{{maskId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"mask",
						"{{maskId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check All Masks are Deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"GET function works\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Object.keys(jsonData).length).to.equal(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/mask/mask-count",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"mask",
						"mask-count"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register New Notification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST status code \", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.globals.set(\"notifId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"endpoint\":\"https://updates.push.services.mozilla.com/wpush/v2/gAAAAABgSPRjuRDZCGZ61wzghz9Z6lz8DNhGC4j6VSwwkNmwDoWYXv_Cet7zXsXv0KLQZb12bxOjFRPXZ-LhaXTKG2h1XU-i80jZdEJEemyT2NCJ02qFvJv88ztAltgE3cpSTMshdAf9frngaFiFK-7TMmYCc5rCsEA7RROYXiJgFLu8hHKL3Gk\",\"keys\":{\"auth\":\"LTA2mU0QQgxTb42KT3lUdQ\", \"p256dh\":\"BO-fIOT-U2CX9lCQ6xe_vZ4CWEejzbctGJxAWfj0M1NfjLRJTOx9KFE4o_xsmMMjC-SdJAUXo5YF-V9_jl-bqKU\"}}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/notification/register-new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"notification",
						"register-new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Notification Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check Notification isn't empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/notification/id/{{notifId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"notification",
						"id",
						"{{notifId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Notification To Id ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check POST status code \", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"endpoint\":\"https://updates.push.services.mozilla.com/wpush/v2/gAAAAABgSPRjuRDZCGZ61wzghz9Z6lz8DNhGC4j6VSwwkNmwDoWYXv_Cet7zXsXv0KLQZb12bxOjFRPXZ-LhaXTKG2h1XU-i80jZdEJEemyT2NCJ02qFvJv88ztAltgE3cpSTMshdAf9frngaFiFK-7TMmYCc5rCsEA7RROYXiJgFLu8hHKL3Gk\",\"keys\":{\"auth\":\"LTA2mU0QQgxTb42KT3lUdQ\", \"p265dh\":\"BO-fIOT-U2CX9lCQ6xe_vZ4CWEejzbctGJxAWfj0M1NfjLRJTOx9KFE4o_xsmMMjC-SdJAUXo5YF-V9_jl-bqKU\"}}"
				},
				"url": {
					"raw": "http://localhost:3001/notification/send/{{notifId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"notification",
						"send",
						"{{notifId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Most Recent Notification ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check GET doesn't return empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.not.equal(null);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/notification/latest",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"notification",
						"latest"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Registered Notification Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204 - mask successfully deleted\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3001/notification/id/{{notifId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"notification",
						"id",
						"{{notifId}}"
					]
				}
			},
			"response": []
		}
	]
}